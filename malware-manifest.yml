# Manifest file for malware data collection
---
# -----------------------------------------------------------------------------------------------------------------
# Values listed under malware_options can be modified as required
# -----------------------------------------------------------------------------------------------------------------
malware_options:
    # The location from which to get the yara rules
    rules_location: https://cert.console.redhat.com/api/malware-detection/v1/signatures.yar

    # Scan the filesystem?
    scan_filesystem: true

    # Scan the running processes?
    scan_processes: false

    # scan_only: a single or list of files/directories/process IDs to scan, for example:
    # scan_only:
    # - /var/www
    # - /home
    # ... means scan only files in /var/www and /home.  May also be written as scan_only: [/var/www, /home]
    # scan_only: 12345
    #... means scan only process ID 12345
    # No value means scan all files/directories/PIDs
    scan_only:

    # scan_exclude: a single or list of files/directories to be excluded from filesystem scanning
    # If an item appears in both scan_only and scan_exclude, scan_exclude takes precedence and the item will be excluded
    # The scan_exclude list is pre-populated with a number of top level directories that are recommended to be excluded
    scan_exclude:
    - /proc
    - /sys
    - /cgroup
    - /selinux
    - /net
    - /mnt
    - /media
    - /dev

    # Exclude mounted network/external filesystems mountpoints?
    # Scanning files within mounted network filesystems may be slow and cause extra network traffic.
    # They are excluded by default, meaning that files in network/externally mounted filesystems are not scanned.
    # Their mountpoints will be added to the scan_exclude list of directories to be excluded from scanning
    exclude_network_filesystems: true

    # List of network/external filesystem types to search for mountpoints on the system.
    # If any mountpoints are found for these filesystem types, the value of the exclude_network_filesystem option
    # will determine if files within the mountpoints are scanned or not
    network_filesystem_types: [nfs, nfs4, cifs, smbfs, fuse.sshfs, ceph, glusterfs, gfs, gfs2]

    # scan_since: scan files created or modified since X days ago or since the 'last' scan.
    # Valid values are integers >= 1 or the string 'last'.  For example:
    # scan_since: 1
    # ... means scan files created/modified since 1 day ago
    # scan_since: last
    # ... means scan files created/modified since the last successful scan
    # No value means scan all files regardless of created/modified date
    scan_since:

    # Add extra metadata about each scan match (if possible), eg file type & md5sum, matching line numbers, process name
    # The extra metadata will display in the webUI along with the scan matches
    add_metadata: true

    # Perform a simple test scan of the malware process to verify scanning and uploading is working correctly
    # The results from this scan do not show up in the webUI
    test_scan: false

    # Specific location of the yara binary file.  Autodetected if not specified.  For example:
    # yara_binary: /usr/local/bin/yara
    yara_binary:

    # Abort a particular scan if it takes longer than scan_timeout seconds.  Default is 3600 seconds (1 hour)
    scan_timeout: # 3600

    # Run the yara process with this nice priority value.  Default is 19 (lowest priority)
    nice_value: # 19

    # The max number of CPUs threads used by yara when scanning.  Autodetected, but default is 2
    cpu_thread_limit: # 2

# -----------------------------------------------------------------------------------------------------------------
# The remainder of this file should not be modified
# -----------------------------------------------------------------------------------------------------------------
# version is for the format of this file, not its contents.
version: 0
content_type: application/vnd.redhat.malware.results+tgz

client:
    context:
        class: insights.core.context.HostContext
        args:
            timeout: 10 # timeout in seconds for commands. Doesn't apply to files.

    blacklist:
        files: []
        commands: []
        patterns: []
        keywords: []

    persist:
      # determines what will appear in the archive
        - name: insights.specs.malware.MalwareSpecs
          enabled: true

    run_strategy:
        name: serial
        args:
            max_workers: null

plugins:
    # disable everything by default
    # defaults to false if not specified.
    default_component_enabled: false
    packages:
      # determines which packages are loaded. These will be namespaced to the relevant collector
        - insights.specs.malware
    configs:
        # determines which specs get loaded
        - name: insights.specs.malware.MalwareSpecs
          enabled: true
