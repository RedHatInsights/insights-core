"""
Malware Detection Client for Red Hat Insights.

This module provides the main malware detection functionality, including:
- YARA-based scanning of filesystems and processes
- Rule management and downloading
- Scan result processing and formatting
- Configuration management

The module has been restructured for better readability and maintainability
while maintaining Python 2.7 and 3.x compatibility.
"""

import os

import logging

from insights.client.constants import InsightsConstants as constants
from insights.client.utilities import write_data_to_file

from insights.specs.datasources.malware_detection.config import MalwareConfig
from insights.specs.datasources.malware_detection.yara import YaraCommandBuilder
from insights.specs.datasources.malware_detection.rules import RuleManager
from insights.specs.datasources.malware_detection.scan import ScanManager
from insights.specs.datasources.malware_detection.results import ScanResultParser

logger = logging.getLogger(__name__)


class MalwareDetectionClient:
    """
    Main client for malware detection using YARA rules.

    This class orchestrates the malware detection process including configuration
    management, rule loading, scanning execution, and result processing.
    """

    def __init__(self, insights_config):
        """
        Initialize the malware detection client.

        Args:
            insights_config: Insights client configuration object
        """
        # Core configuration
        self.config = MalwareConfig(insights_config)

        # Initialize scan configuration manager
        self.scan_manager = ScanManager()

        # Initialize rule manager
        self.rule_manager = RuleManager(
            self.config.insights_config,
        )

        # Initialize YARA command builder
        self.yara_commander = YaraCommandBuilder()

        # Initialize scan results parser
        self.scan_results = ScanResultParser(self.config)

    def parse_scan_options(self):
        """
        Parse and validate scan configuration options.

        Returns:
            bool: True if scan options are valid, False otherwise
        """
        if self.config.test_scan:
            self.scan_manager.parse_test_scan_option(self.config)
        self.scan_manager.parse_scan_options(self.config)

    def load_rules(self):
        self.rule_manager.cleanup_old_rules(self.config)

        self.rule_manager.find_local_rules(self.config.rules_location)
        if self.config.use_remote_rules or self.config.test_scan:
            # Check if insights-config is defined first because we need to access its auth and network config
            if not self.config.insights_config:
                logger.error("Couldn't access the insights-client configuration")
                exit(constants.sig_kill_bad)
            if self.rule_manager.is_local_file(self.config.remote_rules_location):
                logger.error("REMOTE_RULES_LOCATION should be an url not local file")
                exit(constants.sig_kill_bad)
            self.rule_manager.build_remote_rules_url(self.config)
            self.rule_manager.validate_and_adjust_url(self.config)

            # If doing a test scan, replace signatures.yar (or any other file suffix) with test-rule.yar
            if self.config.test_scan:
                self.rule_manager.alter_remote_url_to_test(self.config)

            logger.debug(
                "Downloading rules from: %s", self.config.remote_rules_location
            )
            logger.debug("Using cert_verify value %s ...", self.config.cert_verify)

            self.rule_manager.download_rules(self.config)

    def load_disabled_rules(self):
        """
        Download the list of disabled rules, if any.
        Doesn't apply if doing a test scan or if the rules are in a local file
        Uses network connection information set via the _get_rules method, eg conn, rules_location & cert_verify
        """
        if self.config.test_scan or not self.config.use_remote_rules:
            return

        self.rule_manager.get_disabled_rules(self.config)

        logger.debug("Disabled rules: %s", self.rule_manager.disabled_rules)

    def build_yara_commands(self):
        self.yara_commander.set_rules_files(self.rule_manager.rules_files, self.config)
        self.yara_commander.build_commands(self.config)

    def run(self):

        # Run malware scan
        filesystem_scan_start, processes_scan_start = self.scan_manager.run_scan(
            self.config,
            self.yara_commander,
            self.rule_manager.rules_files,
            self.rule_manager.disabled_rules,
            self.scan_results,
        )

        self.scan_results.process_scan_results(self.config)

        # Write the scan start times to disk if scans were performed
        # (used by the 'filesystem_scan_since: last' and 'processes_scan_since: last' options)
        # Only write the scan time after scans have completed without error or interruption, and its not a test scan
        if not self.config.test_scan:
            if self.config.do_filesystem_scan:
                write_data_to_file(
                    filesystem_scan_start, self.config.last_filesystem_scan_file
                )
                os.chmod(self.config.last_filesystem_scan_file, 0o644)
            if self.config.do_process_scan:
                write_data_to_file(
                    processes_scan_start, self.config.last_process_scan_file
                )
                os.chmod(self.config.last_process_scan_file, 0o644)
        else:
            logger.info(
                "\nRed Hat Insights malware-detection app test scan complete.\n"
                "Test scan results are not recorded in the Insights UI (%s)\n"
                "To perform proper scans, please set test_scan: false in %s\n",
                self.config.malware_app_url,
                self.config.malware_config_file,
            )

        return self.scan_results.host_scan_mutation, self.scan_results.host_scan
