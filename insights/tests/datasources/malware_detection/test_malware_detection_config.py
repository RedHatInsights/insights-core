# -*- coding: UTF-8 -*-
import pytest

from mock.mock import patch, ANY

from insights.specs.datasources.malware_detection import MalwareDetectionClient
from insights.tests.datasources.malware_detection.conftest import (
    TEMP_CONFIG_FILE,
    CONFIG,
    CONFIG_LOGGER_TARGET,
    CONFIG_CALL_TARGET,
    CONFIG_FILE_TARGET,
)


class TestsMalwareDetectionConfig:
    def test_default_options(self):
        # Read in the default malware_detection_config options and check their values
        assert CONFIG["test_scan"] is True
        assert CONFIG["scan_filesystem"] is True
        assert CONFIG["scan_processes"] is False
        assert CONFIG["filesystem_scan_only"] is None
        assert CONFIG["processes_scan_only"] is None
        assert CONFIG["filesystem_scan_since"] is None
        assert CONFIG["processes_scan_since"] is None
        assert all(
            [
                x in CONFIG["filesystem_scan_exclude"]
                for x in [
                    "/proc",
                    "/sys",
                    "/cgroup",
                    "/selinux",
                    "/net",
                    "/mnt",
                    "/media",
                ]
            ]
        )
        assert CONFIG["processes_scan_exclude"] is None
        assert CONFIG["exclude_network_filesystem_mountpoints"] is True


@patch(CONFIG_LOGGER_TARGET)
class TestFindYara:

    def test_find_yara_binary(self, log_mock, create_test_files_fake_yara):
        # Testing finding yara with correct version
        with patch("os.path.exists", return_value=True):
            with patch(CONFIG_CALL_TARGET, return_value="4.1"):
                with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
                    mdc = MalwareDetectionClient(None)
        assert mdc.config.yara_binary == "/bin/yara"
        assert mdc.config.yara_version == "4.1"

        # 'Find' yara in /usr/bin/yara (fails to 'find' /bin/yara)
        with patch("os.path.exists", side_effect=[False, True]):
            with patch(CONFIG_CALL_TARGET, return_value="4.1"):
                with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
                    mdc = MalwareDetectionClient(None)
        assert mdc.config.yara_binary == "/usr/bin/yara"
        assert mdc.config.yara_version == "4.1"

    def test_find_unsupported_yara(self, log_mock, create_test_files_fake_yara):
        # Test finding unsupported yara version
        with patch("os.path.exists", return_value=True):
            with patch(CONFIG_CALL_TARGET, return_value="3.10"):
                with pytest.raises(SystemExit):
                    with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
                        mdc = MalwareDetectionClient(None)
                    assert mdc.config.yara_version == "3.10"
        log_mock.error.assert_called_with(
            "Found /bin/yara with version 3.10, but malware-detection requires version >= 4.1.0\n"
            "Please install a later version of yara."
        )

    def test_find_invalid_yara(self, log_mock, create_test_files_fake_yara):
        # Test finding a binary called yara, but its not yara
        with patch("os.path.exists", return_value=True):
            with patch(CONFIG_CALL_TARGET, return_value="not yara 1.2.3"):
                with pytest.raises(SystemExit):
                    with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
                        MalwareDetectionClient(None)
        log_mock.error.assert_called_with(
            "Error getting the version of the specified yara binary %s: %s",
            "/bin/yara",
            ANY,
        )

    def test_cant_find_yara(self, log_mock, create_test_files_fake_yara):
        # Test can't find yara on the system
        with patch("os.path.exists", return_value=False):
            with pytest.raises(SystemExit):
                with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
                    MalwareDetectionClient(None)
        log_mock.error.assert_called_with(
            "Couldn't find yara. Please ensure the yara package is installed"
        )

    @patch("os.path.exists", return_value=True)
    @patch(CONFIG_CALL_TARGET)  # mock call to 'yara --version'
    def test_yara_versions(
        self, version_mock, exists_mock, log_mock, create_test_files_fake_yara
    ):
        # Test checking the version of yara
        # Invalid versions of yara
        for version in ["4.0.99", "4"]:
            version_mock.return_value = version
            with pytest.raises(SystemExit):
                with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
                    MalwareDetectionClient(None)

        # Valid versions of yara
        for version in ["4.1", "4.10.10", "10.100.1000.0", "5"]:
            version_mock.return_value = version
            with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
                mdc = MalwareDetectionClient(None)
            assert mdc.config.yara_binary == "/bin/yara"
            assert mdc.config.yara_version in [
                "4.1",
                "4.10.10",
                "10.100.1000.0",
                "5",
            ]
