# -*- coding: UTF-8 -*-
import os
import sys

import pytest
import yaml
import string
import random

from insights.client.config import InsightsConfig

from insights.tests.helpers import getenv_bool
from insights.util.subproc import call

from insights.specs.datasources.malware_detection.config import (
    DEFAULT_MALWARE_CONFIG,
)

# Temporary directory for testing stuff in
RANDOM_STRING = "".join(random.choice(string.ascii_lowercase) for _ in range(5))
TEMP_TEST_DIR = "/tmp/malware-detection_test_dir_%s" % RANDOM_STRING
TEMP_TEST_SIGNATURES = TEMP_TEST_DIR + "/signatures"

FAKE_YARA = "/bin/yara"  # Need to fake yara for a number of tests
FAKE_YARA_VERSION = "4.1.0"

THIRD_PARTY_RULES_FILE = os.path.join(TEMP_TEST_SIGNATURES, "goethe.yara")
RULES_FILE = os.path.join(TEMP_TEST_SIGNATURES, "malware-detection_yara_rules.yar")
TEST_RULE_FILE = os.path.join(TEMP_TEST_SIGNATURES, "test-rule.yar")
TEST_RULE_SCRIPT = os.path.join(TEMP_TEST_DIR, "test-rule_process_match.sh")
MATCHING_ENTITY_FILE = os.path.join(TEMP_TEST_DIR, "matching_entity")
ANOTHER_MATCHING_ENTITY_FILE = os.path.join(TEMP_TEST_DIR, "another matching_entity")
CONFIG = yaml.safe_load(DEFAULT_MALWARE_CONFIG)  # Config 'returned' from _load_config
TEMP_CONFIG_FILE = os.path.join(TEMP_TEST_DIR, "malware-detection-config.yml")
TEST_PID = str(os.getpid())  # This running processes ID
FAKE_YARA_CMD = [
    "nice",
    "-n",
    "19",
    FAKE_YARA,
    "-s",
    "-N",
    "-a",
    "3600",
    "-p",
    "2",
    "-r",
    "-f",
    TEST_RULE_FILE,
    THIRD_PARTY_RULES_FILE,
]
# Get the number of CPU threads to run yara
CPUS = 1 if int(call("nproc").strip()) <= 2 else 2

# Various patch targets
CONFIG_LOGGER_TARGET = "insights.specs.datasources.malware_detection.config.logger"
SCAN_UTILS_LOGGER_TARGET = (
    "insights.specs.datasources.malware_detection.scan.scan_utils.logger"
)
SCAN_LOGGER_TARGET = "insights.specs.datasources.malware_detection.scan.logger"
RULES_LOGGER_TARGET = "insights.specs.datasources.malware_detection.rules.logger"
RESULTS_LOGGER_TARGET = "insights.specs.datasources.malware_detection.results.logger"
YARA_LOGGER_TARGET = "insights.specs.datasources.malware_detection.yara.logger"
CLIENT_LOGGER_TARGET = "insights.specs.datasources.malware_detection.logger"
DS_LOGGER_TARGET = (
    "insights.specs.datasources.malware_detection.malware_detection_ds.logger"
)

DOWNLOAD_RULES_TARGET = (
    "insights.specs.datasources.malware_detection.rules.RuleManager.download_rules"
)

DISABLED_RULES_TARGET = (
    "insights.specs.datasources.malware_detection.rules.get_disabled_rules"
)

LOAD_CONFIG_TARGET = "insights.specs.datasources.malware_detection.config.MalwareConfig._load_or_create_malware_config"
FIND_YARA_TARGET = (
    "insights.specs.datasources.malware_detection.config.MalwareConfig._find_yara"
)
GET_RULES_TARGET = (
    "insights.specs.datasources.malware_detection.MalwareDetectionClient._get_rules"
)

BUILD_YARA_COMMAND_TARGET = "insights.specs.datasources.malware_detection.MalwareDetectionClient._build_yara_command"
FINDMNT_TARGET = "insights.specs.datasources.malware_detection.scan.ScanManager._parse_exclude_network_filesystem_mountpoints_option"
CONFIG_CALL_TARGET = "insights.specs.datasources.malware_detection.config.call"
YARA_CALL_TARGET = "insights.specs.datasources.malware_detection.yara.call"
SCAN_CALL_TARGET = "insights.specs.datasources.malware_detection.scan.call"
RESULTS_CALL_TARGET = "insights.specs.datasources.malware_detection.results.call"
CONFIG_FILE_TARGET = (
    "insights.specs.datasources.malware_detection.config.MALWARE_CONFIG_FILE"
)
NAMEDTMPFILE_TARGET = (
    "insights.specs.datasources.malware_detection.rules.NamedTemporaryFile"
)

# Run these slowish tests?
TEST_PROCESSES_SCAN_SINCE = getenv_bool("TEST_PROCESSES_SCAN_SINCE", False)
TEST_DOWNLOAD_FAILURE_RETRIES = getenv_bool("TEST_DOWNLOAD_FAILURE_RETRIES", False)
TEST_GET_DISABLED_RULES_FAILURE = getenv_bool("TEST_GET_DISABLED_RULES_FAILURE", False)
TEST_ALL = getenv_bool("TEST_ALL", False)

# Are we running on RHEL6? (well actually, with python 2.6)
IS_RHEL6 = sys.version_info < (2, 7)
SKIP_IF_RHEL6_REASON = (
    "The malware-detection client isn't supported on RHEL6 / python 2.6"
)
# Is the best way to determine if we are running in a container?
IS_CONTAINER = (
    os.path.exists("/.dockerenv")
    or os.path.exists("/run/.containerenv")
    or "1" not in call("pidof init systemd").strip().split()
)
SKIP_IF_CONTAINER_REASON = (
    "This test uses running process that may not exist when run in a container"
)

EXCLUDE_FILES_LIST = ["/proc", "/sys", "/cgroup", "/selinux", "/net", "/mnt", "/media"]
for item in list(EXCLUDE_FILES_LIST):
    if os.path.exists(item):
        continue
    elif os.path.islink(item):
        continue
    else:
        EXCLUDE_FILES_LIST.remove(item)
EXCLUDE_FILES_LIST.append(TEMP_TEST_SIGNATURES)

# replace rules location with test directory location and disabled remote ruels
DEFAULT_MALWARE_CONFIG = DEFAULT_MALWARE_CONFIG.replace(
    "/etc/insights-client/signatures", TEMP_TEST_SIGNATURES
)
DEFAULT_MALWARE_CONFIG = DEFAULT_MALWARE_CONFIG.replace(
    "use_remote_rules: true", "use_remote_rules: false"
)


@pytest.fixture
def create_test_files_fake_yara():
    # Write the test files to the temp directory
    if not os.path.exists(TEMP_TEST_DIR):
        os.mkdir(TEMP_TEST_DIR)
    if not os.path.exists(TEMP_TEST_SIGNATURES):
        os.mkdir(TEMP_TEST_SIGNATURES)
    with open(TEMP_CONFIG_FILE, "w") as tcf:
        tcf.write(DEFAULT_MALWARE_CONFIG)
    test_files = [
        (MATCHING_ENTITY_FILE, MATCHING_ENTITY_FILE_CONTENTS),
        (ANOTHER_MATCHING_ENTITY_FILE, ANOTHER_MATCHING_ENTITY_FILE_CONTENTS),
        (THIRD_PARTY_RULES_FILE, THIRD_PARTY_RULE_CONTENTS),
        (TEST_RULE_FILE, TEST_RULE_FILE_CONTENTS),
        (TEST_RULE_SCRIPT, TEST_RULE_SCRIPT_CONTENTS),
    ]
    for test_file, contents in test_files:
        if not os.path.exists(test_file):
            with open(test_file, "w") as f:
                f.write(contents)
    os.chmod(TEST_RULE_SCRIPT, 0o755)
    yield
    os.system("rm -rf %s" % TEMP_TEST_DIR)


@pytest.fixture
def extract_tmp_files():
    if not os.path.exists(TEMP_TEST_DIR):
        os.mkdir(TEMP_TEST_DIR)
    os.system(
        "echo '%s' | base64 -d - | tar -C %s -zxf -"
        % (SCAN_FILES_BASE64, TEMP_TEST_DIR)
    )
    yield
    os.system("rm -rf %s" % TEMP_TEST_DIR)


config = InsightsConfig(
    legacy_upload=True, base_url="localhost/app", systemid="", proxy=None
)

THIRD_PARTY_RULE_CONTENTS = """
rule goethe
{
    meta:
        description = "Test Third Party Rule"
        author = "Goethe"
        date = "2025-08-15"
        version = "1.0"
    strings:
        $goethe_string = { 57 65 6E 6E 20 69 6D 20 55 6E 65 6E 64 6C 69 63 68 65 6E 20 64 61 73 73 65 6C 62 65 20 53 69 63 68 20 77 69 65 64 65 72 68 6F 6C 65 6E 64 20 65 77 69 67 20 66 6C 69 65 73 73 74 2E }
    condition:
        any of ($goethe_string)
}
"""


MATCHING_ENTITY_FILE_CONTENTS = """
This line contains a string match in the file "matching_entity"
This line contains another string match in matching_entity and it is very long for testing the ellipses that are added onto very long lines

And this line contains a string with different types of quotes 'here' and "here" and its long too but not long enough
""".lstrip()

ANOTHER_MATCHING_ENTITY_FILE_CONTENTS = """


string match containing error scanning but it's ok because its not in a rule line



This line contains = char
This line contains = char too
This line contains .+ chars
This line contains .+ chars too
This line contains "" chars
This line contains '' chars
This line contains ()[] chars
This line contains {} chars
This line contains ^$ chars
This line contains ^$ chars too
The previous line and this one too are ignored as they are beyond the default 10 string match limit
"""[
    1:
]  # Ignore first newline char otherwise it changes the md5sum

TEST_RULE_FILE_CONTENTS = """
rule TEST_RedHatInsightsMalwareDetection
// Verifies the Red Hat Insights Malware Detection Client app is present on the system
{
    strings:
        $re1 = /Malware ?Detection ?Client/
    condition:
        $re1
}
""".lstrip()

TEST_RULE_SCRIPT_CONTENTS = """
#!/bin/sh
# As a process this will match the TEST_RedHatInsightsMalwareDetection rule
echo "Malware Detection Client"
sleep 3
""".lstrip()

CONTRIVED_SCAN_OUTPUT = """
error scanning this line, it will be skipped
this line also contains error scanning so it will be skipped too
0x1:$string1: skip me coz the rule line had an error
0x11:$string2: skip me too
0x111:$string3: skip me three
this [] line doesn't contain e-r-r-o-r s-c-a-n-n-i-n-g so will be considered a scan match, even though it shouldn't
0x123:$match: matches 'this' rule
BadFormat
0x1:$skipme: the previous line will fail because it doesn't follow the 'rule matching_entity' format
Rule:matching_entity
0x1:$alsoskipme: the previous line also fails because it has a ":" instead of a " " between rule & matching_entity
Rule [] %s
0x15:$match0: string match in the file "matching_entity"
0x53:$match1: another string match in matching_entity
0xe6:$match2: string with different types of quotes 'here' and "here"
Rule [] %s
0x2:$match3: string match containing error scanning but it's ok because its not in a rule line
0x61:$grep1: contains =
0x7b:$grep1: contains =
0x99:$grep2: contains .+
0xb5:$grep2: contains .+
0xd5:$grep3: contains "
0xf1:$grep4: contains '
0x10d:$grep5: contains ()[]
0x12b:$grep6: contains {
0x147:$grep7: contains ^$
0x163:$grep7: contains ^$
0x179:$ignored: The previous line and this one too are ignored as they are beyond the default 10 string match limit
Rule [] matching_entity_3, but without any string matches - yes that's ok
more error scanning this line
another_matching_rule [] /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/signal-desktop/350/opt/Signal/resources/app.asar
0x212f197:$s0: #!/bin/sh
0x2130313:$s0: #!/bin/sh
0x39f7cc6:$s0: #!/bin/sh
another_matching_rule [] /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859error scanning /dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/signal-desktop/350/opt/Signal/resources/app2.asar
0x212f197:$s0: #!/bin/sh
0x2130313:$s0: #!/bin/sh
0x39f7cc6:$s0: #!/bin/sh
another_matching_rule [] 1234567
0x0:$s0: #!/bin/sh
0x1badoffset:$s1: skip this line
0x2error scanning skip/this/line/too: need more colons
badoffset_but_notarule:$s2: a bad offset line that looks a bit like a rule line but really isn't
007 isn't considered a valid rule name
666neither is this
_me neither
 same here
nor: I
Iyamtho [] yep
n_m3_t00 [] damn   straight
error scanning /var/lib/snapd/snap/core/10859/dev/core: error: 4
error scanning /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/core: error: 4
error scanning /var/lib/snapd//cookie/snap.gnome-3-28-1804: could not open file
error scanning /var/lib/snapd//device/private-keys-v1/_53ir43FCxbgdSyj8NriGt9gfonABhzHHhsGnGhvjqpK_hwdIcP0ScJpKppzEhps: could not open file
""" % (
    MATCHING_ENTITY_FILE,
    ANOTHER_MATCHING_ENTITY_FILE,
)

RANDOM_OUTPUT = """
Lorem [] ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Dictum [] at tempor commodo ullamcorper a lacus vestibulum sed. Non odio euismod lacinia at quis risus sed.
"""

# Base64 representation of a tgz file containing simple files to be extracted into /tmp to be used for scanning
# It is decoded and unzipped in the extract_tmp_files fixture
SCAN_FILES_BASE64 = """
H4sIAD+feGEAA+1a247TMBDtc79iVCEVhARxrk888A+8IajSxt1Ym8YlcXZVIf6dcbZG2WzTkm5t
ijpnH3KxHbt7PPaZGdertFxs+MeJRXiIJIn0lSWR170aTFjIgpixJAyCicdY5IcTiGwOyqCpVVoB
TDZ5o/Ij9U6V/6eo9/yX/HGxFgW30YcmOI7DEfwHvh9NwLMxmD6I/5Z/WWRXxT/ziX8XMPxvxZbb
mgBn8B8kyQRiC2N5AeK/5T+TpVrUdsTA+P0/ZFFE+78LHOR/k6pVLsq7BS+VULvX9nHK/iMv6PGf
+Fid1n8H+JKLGgpRcljhDEhFWUMKtaqQfWinAYgSVM5B7w0w682M2fRQ+1Jig+rFV3ptsV4GQgG2
f+DVDgqJldeyAsVrpRvqXnlRiG3Na3xIFaQVhzTLeAbYl+w00wOop9PP+EV15Ac9CpVDJtZrXuEY
QO22+GW5hh+NxE5hjqPm83ZcM3072w+xfupESQnLRgH+vKcXvJTNXT791xS+Csbkl5W85+UC/3H3
F+/jaf1PRqz/MYtw//dtDsrgxu3f8G9p628xfv8P8I/2fxfo86/XvYVYpJsL9jFe/4dJRP6fE/T4
t+ICtvyHw/wnQdTn34ti4t8FptNnMm2vmfQLXlUoxvS8aB+18hFqjnrpHpZ8lTY1b6WRVkMo7lKo
GhSIWnhNEQdk4SdY5Wk1XKL11aHSD+/b4vpY2VDb2Wy47Xw+XPb23ddvw6U/fw2XfX9zumw/Wg7b
ij8I2ezrpUa9SnzQYlPLXXFXygoFb6olMN+175Z8J9u6HDK+TptCAfOey+1CbIT6G2Vq7F9rLJvx
n1H6z2e4AqD+s+mUGty4/Zt1H83YWg5ovP7zQ4/yP07Q5d9WDugM/cc8yv84QZd/WzmgM/j3EtL/
TtDl31YO6Az+/YjyP07Q5f/PPX/g1QXVwPj9P/KZR/u/Cwzzb8L4r9fdp+z/hf/v4zWh9d8FyP8n
/9/YvyUP+4z8bxSxgOzfBSj/S/lfY/+2YoCj438sCWKd/7W1IHVx4/Zv+MfJfV3xPzr/5QRd/rvh
9ktOiDP8v4QlxL8LHOX/Qi7geP/PDyn/6wbk/5H/Z8z9qvI/ZP9O0OX/qvI/5P87QZf/a8r/xB7l
f1ygy7+t49Zn+P9ee/6Hzn9bR5d/W7GA8f5fGOv1n/w/+xjg/6LbQLv+Hzn/eyD+j7e0/7sAxf8p
/m/s/2ri/34Y+EHv/O8lA1Jd3Lj9EwgEAoFAIBBuC78BaSEregBQAAA=""".replace(
    "\n", ""
)

TEST_RULE1 = b"""
rule MalwareDetectionClientRule
{
    strings:
        $text1 = "MalwareDetectionClient" fullword

    condition:
        $text1
}
"""

TEST_RULE2 = b"""
rule MiscellaneousStringsRule
// sent""
// ata_sff\\\\x00bioset\\\\x00bond0\\\\x00cifsd\\\\x00
{
    strings:
        $string1 = "sent\\"" fullword
        $string2 = "ata_sff\\\\x00bioset\\\\x00bond0\\\\x00cifsd\\\\x00"

    condition:
         any of them
}
"""

RULE_RULE_FILE_CONTENTS = r"""
rule Rule
/*
   Strings to trigger matches in the tests/matching_entity and tests/another\\ matching_entity files
   Output from this rule against those files should look like CONTRIVED_SCAN_OUTPUT in tests/test_parse_scan_output.py
   This file is also used in tests for testing rules files with spaces in them
*/
{
    meta:
        description = "Strings to trigger matches in the test/*matching_entity files"

    strings:
        $match0 = "string match in the file \\"matching_entity\\""
        $match1 = "another string match in matching_entity"
        $match2 = "string with different types of quotes 'here' and \\"here\\""
        $match3 = "string match containing error scanning but it's ok because its not in a rule line"

        $grep1 = "contains ="
        $grep2 = "contains .+"
        $grep3 = "contains \\""
        $grep4 = "contains '"
        $grep5 = "contains ()[]"
        $grep6 = "contains {"
        $grep7 = "contains ^$"

    condition:
        any of them
}
"""

RULE_METADATA_TEST_FILE_CONTENTS = r"""rule MetadataTestRule
/*
    // These rule strings will match the rule strings below unmodified ...
    Testing $s4 = "for ssh_creds in ${allThreads[@]}; do" ascii fullword
    Testing $s8 = "allThreads=($1)" ascii fullword
    Testing $s9 = "$(host): encrypt files. Done." ascii fullword

    // These rule strings with some modifications match the rule strings below ...
    Testing $s1 = "echo -e \"[-] Ping \\033[31m${host_name}\\033[0m bad" ascii fullword
    Testing $s2 = ""${user_name}"@"${host_name}" -p "${port}" ascii fullword
    Testing $s3 = "'$password' &" <<< GMANcode27'" ascii fullword
    Testing $s5 = ""text=$MSG" "$MSG_URL$id&"" ascii fullword
    Testing $s6 = "--exclude=\*.☢ -l" fullword
    Testing $s7 = "--include=\*.{txt,sh,exe}" ascii fullword
*/
{
    strings:
        $s1 = "echo -e \\"[-] Ping \\\\033[31m${host_name}\\\\033[0m bad\\"" ascii fullword
        $s2 = "\\"${user_name}\\"@\\"${host_name}\\" -p \\"${port}" ascii fullword
        $s3 = "'$password' &\\" <<< GMANcode27'" ascii fullword
        $s4 = "for ssh_creds in ${allThreads[@]}; do" ascii fullword
        $s5 = "\\"text=$MSG\\" \\"$MSG_URL$id&\\"" ascii fullword
        $s6 = "--exclude=\\\\*.☢ -l" fullword
        $s7 = "--include=\\\\*.{txt,sh,exe}" ascii fullword
        $s8 = "allThreads=($1)" ascii fullword
        $s9 = "$(host): encrypt files. Done." ascii fullword

    condition:
        any of them
}
"""

ERROR_SCAN_OUTPUT = """
error scanning /var/lib/snapd//snap/core/10859/dev/core: could not open file
error scanning /var/lib/snapd//snap/core/10859/dev/fd/3/cookie/snap.core: could not open file
error scanning /var/lib/snapd//cookie/snap.gnome-3-28-1804: could not open file
error scanning /var/lib/snapd//device/private-keys-v1/_53ir43FCxbgdSyj8NriGt9gfonABhzHHhsGnGhvjqpK_hwdIcP0ScJpKppzEhps: could not open file
"""

ERROR4_SCAN_OUTPUT = """
error scanning /var/lib/snapd/snap/core/10859/dev/core: error: 4
error scanning /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/core: error: 4
error scanning /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/core: error: 4
error scanning /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/core: error: 4
"""
