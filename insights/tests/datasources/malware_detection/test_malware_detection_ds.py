# -*- coding: UTF-8 -*-
import pytest
import yaml

from mock.mock import patch
from insights.specs.manifests import manifests, content_types
from insights.client.config import InsightsConfig
from insights.core.spec_factory import DatasourceProvider
from insights.core.exceptions import SkipComponent
from insights.specs.datasources.malware_detection.malware_detection_ds import (
    malware_detection,
)

from insights.tests.datasources.malware_detection.conftest import (
    CONFIG_FILE_TARGET,
    TEMP_CONFIG_FILE,
)


config = InsightsConfig(
    legacy_upload=True, base_url="localhost/app", systemid="", proxy=None
)

#######################################################################
# The following section tests functionality of malware_detection_ds
#######################################################################


@patch("insights.specs.datasources.malware_detection.MalwareDetectionClient")
@patch(
    "insights.specs.datasources.malware_detection.MalwareDetectionClient.run",
    return_value=[
        '{"mutation": "test"}',  # GraphQL mutation
        {"rule1": [{"match": "data"}]},  # Raw results
    ],
)
@patch(
    "insights.specs.datasources.malware_detection.MalwareDetectionClient.build_yara_commands"
)
@patch(
    "insights.specs.datasources.malware_detection.MalwareDetectionClient.load_disabled_rules"
)
@patch("insights.specs.datasources.malware_detection.MalwareDetectionClient.load_rules")
@patch(
    "insights.specs.datasources.malware_detection.MalwareDetectionClient.parse_scan_options"
)
@patch(
    "insights.specs.datasources.malware_detection.config.MalwareConfig._find_yara",
    return_value=("/bin/yara", "4.1.0"),
)
class TestsMalwareDetectionDS:
    def test_default_spec(
        self,
        yara,
        scan_options,
        load_rules,
        load_disabled,
        build_yara,
        run,
        mdc,
    ):
        # Read in the default malware spec and check its values
        manifest = yaml.safe_load(manifests["malware-detection"])
        content_type = content_types["malware-detection"]
        assert content_type == "application/vnd.redhat.malware-detection.results+tgz"
        specs = manifest["plugins"]["configs"]
        for spec in [
            "mac_addresses",
            "etc_machine_id",
            "hostname",
            "dmidecode",
            "machine_id",
            "ip_addresses",
            "subscription_manager_id",
        ]:
            assert {
                "enabled": True,
                "name": "insights.specs.default.DefaultSpecs.%s" % spec,
            } in specs
            assert {"enabled": True, "name": "insights.specs.Specs.%s" % spec} in specs

    def test_standard_malware_detection_run(
        self,
        yara,
        scan_options,
        load_rules,
        load_disabled,
        build_yara,
        run,
        mdc,
        create_test_files_fake_yara,
    ):
        # Test the default run of malware_detection
        config["app"] = "malware-detection"
        broker = {"client_config": config}
        with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
            result = malware_detection(broker)
            assert len(result) == 2
            assert isinstance(result[0], DatasourceProvider)
            assert isinstance(result[1], DatasourceProvider)
            assert result[0].content == ['{"mutation": "test"}']
            assert result[0].relative_path == "malware-detection-results.json"
            assert result[1].content == ['{"rule1": [{"match": "data"}]}']
            assert result[1].relative_path == "malware-detection-results-raw.json"

    def test_malware_detection_no_client_config(
        self, yara, scan_options, load_rules, load_disabled, build_yara, run, mdc
    ):
        """Test when broker doesn't return client_config"""
        broker = {}
        with pytest.raises(SkipComponent) as exc_info:
            malware_detection(broker)

        assert (
            "Only run malware-detection app when specifically requested via --collector option"
            in str(exc_info.value)
        )

    def test_malware_detection_no_results_exception(
        self,
        yara,
        scan_options,
        load_rules,
        load_disabled,
        build_yara,
        run,
        mdc,
        create_test_files_fake_yara,
    ):
        """Test correct exception handling is returned when malware_detection scan has no results"""
        config["app"] = "malware-detection"
        broker = {"client_config": config}
        run.return_value = []
        with pytest.raises(SkipComponent) as exc_info:
            with patch(CONFIG_FILE_TARGET, TEMP_CONFIG_FILE):
                malware_detection(broker)

        assert "No scan results were produced" in str(exc_info.value)
