# -*- coding: utf-8 -*-
import pytest

from mock.mock import patch
from insights.core.exceptions import CalledProcessError


from insights.specs.datasources.malware_detection import MalwareDetectionClient
from insights.tests.datasources.malware_detection.conftest import (
    CONFIG,
    FIND_YARA_TARGET,
    LOAD_CONFIG_TARGET,
    YARA_LOGGER_TARGET,
    YARA_CALL_TARGET,
    FAKE_YARA,
    FAKE_YARA_VERSION,
    RULES_FILE,
)


@patch(FIND_YARA_TARGET, return_value=(FAKE_YARA, FAKE_YARA_VERSION))
@patch(LOAD_CONFIG_TARGET, return_value=CONFIG)
class TestBuildYaraCmd:

    @patch("os.path.getsize")
    @patch("os.path.exists")
    def test_build_yara_command_success(self, exists, size, conf, yara):
        expected_yara_cmd = "nice -n 19 {0} -s -m -N -a 3600 -p 1 -r -f%s {1}".format(
            FAKE_YARA, RULES_FILE
        )
        size.return_value = 1
        exists.return_value = True
        # Use side_effect with 3 'call' values because build_yara_command calls 'call' 3 times ...
        # 1 to get the type of the rules file; 2 to see if the rules files contains valid rules; 3 to call nproc
        # Test with text rules file - file type is 'ascii'
        with patch(YARA_CALL_TARGET, side_effect=["ascii", "ok", "2"]) as call_mock:
            mdc = MalwareDetectionClient(None)
            mdc.rule_manager.rules_files = [RULES_FILE]
            mdc.build_yara_commands()
            assert call_mock.call_count == 3
        assert " ".join(mdc.yara_commander.yara_cmd) == expected_yara_cmd % ""

        # Test with 'compiled' rules file - file type is 'Yara 3.x'
        with patch(YARA_CALL_TARGET, side_effect=["Yara 3.X", "ok", "2"]) as call_mock:
            mdc = MalwareDetectionClient(None)
            mdc.rule_manager.rules_files = [RULES_FILE]
            mdc.build_yara_commands()
            assert call_mock.call_count == 3
        assert (
            " ".join(mdc.yara_commander.yara_compiled_cmds[0])
            == expected_yara_cmd % " -C"
        )

        # Another test with compiled rules file - file type is 'data'
        with patch(YARA_CALL_TARGET, side_effect=["data", "ok", "2"]) as call_mock:
            mdc = MalwareDetectionClient(None)
            mdc.rule_manager.rules_files = [RULES_FILE]
            mdc.build_yara_commands()
            assert call_mock.call_count == 3
        assert (
            " ".join(mdc.yara_commander.yara_compiled_cmds[0])
            == expected_yara_cmd % " -C"
        )

    @patch(YARA_LOGGER_TARGET)
    @patch("os.path.getsize")
    @patch("os.path.exists")
    def test_build_yara_command_fail(
        self, exists_mock, size_mock, log_mock, conf, yara
    ):
        # Test with empty rules file, ie file size is 0
        size_mock.return_value = 0
        with patch(YARA_CALL_TARGET, side_effect=["wtf?", "yikes", "2"]) as call_mock:
            with pytest.raises(SystemExit):
                mdc = MalwareDetectionClient(None)
                mdc.rule_manager.rules_files = [RULES_FILE]
                mdc.build_yara_commands()
            call_mock.assert_not_called()  # Only 1 call to 'call' before we exit
        log_mock.error.assert_called_with(
            "Rules file is empty or missing: %s" % RULES_FILE
        )

        # Test with empty rules files, ie the file type is 'empty'
        size_mock.return_value = 1
        exists_mock.return_value = False
        with patch(YARA_CALL_TARGET, side_effect=["empty", "yikes", "2"]) as call_mock:
            with pytest.raises(SystemExit):
                mdc = MalwareDetectionClient(None)
                mdc.rule_manager.rules_files = [RULES_FILE]
                mdc.build_yara_commands()
            call_mock.assert_not_called()
        log_mock.error.assert_called_with(
            "Rules file is empty or missing: %s" % RULES_FILE
        )

        # Test with 'invalid' rules file - raise CalledProcessError when running command
        size_mock.return_value = 1
        exists_mock.return_value = True
        with patch(YARA_CALL_TARGET) as call_mock:
            call_mock.side_effect = [
                "yara",
                CalledProcessError(1, "cmd", b"invalid"),
                "2",
            ]
            mdc = MalwareDetectionClient(None)
            mdc.rule_manager.rules_files = [RULES_FILE]
            mdc.build_yara_commands()
            assert RULES_FILE not in mdc.yara_commander.compiled_files
            assert call_mock.call_count == 3
        log_mock.error.assert_called_with(
            "Invalid rules file %s: %s", RULES_FILE, "invalid"
        )

        # Test with 'invalid' non compiled rules file - raise CalledProcessError when running command
        size_mock.return_value = 1
        exists_mock.return_value = True
        with patch(YARA_CALL_TARGET) as call_mock:
            call_mock.side_effect = [
                "noncompiled",
                CalledProcessError(1, "cmd", b"invalid"),
                "2",
            ]
            mdc = MalwareDetectionClient(None)
            mdc.rule_manager.rules_files = [RULES_FILE]
            mdc.build_yara_commands()
            assert RULES_FILE not in mdc.yara_commander.non_compiled_files
            assert call_mock.call_count == 3
        log_mock.error.assert_called_with(
            "Invalid rules file %s: %s", RULES_FILE, "invalid"
        )
