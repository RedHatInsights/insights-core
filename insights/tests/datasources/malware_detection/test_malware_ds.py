# -*- coding: utf-8 -*-
from mock.mock import patch

from insights.specs.datasources.malware_detection.malware_detection_ds import (
    malware_detection,
)
from insights.client.config import InsightsConfig
from insights.core.spec_factory import DatasourceProvider


config = InsightsConfig(
    legacy_upload=True,
    base_url="localhost/app",
    systemid="",
    proxy=None,
    app="malware-detection",
)


@patch("insights.specs.datasources.malware_detection.MalwareDetectionClient")
@patch(
    "insights.specs.datasources.malware_detection.MalwareDetectionClient.run",
    return_value=[
        '{"mutation": "test"}',  # GraphQL mutation
        {"rule1": [{"match": "data"}]},  # Raw results
    ],
)
@patch(
    "insights.specs.datasources.malware_detection.MalwareDetectionClient.build_yara_commands"
)
@patch(
    "insights.specs.datasources.malware_detection.MalwareDetectionClient.load_disabled_rules"
)
@patch("insights.specs.datasources.malware_detection.MalwareDetectionClient.load_rules")
@patch(
    "insights.specs.datasources.malware_detection.MalwareDetectionClient.parse_scan_options"
)
def test_standard_malware_detection_run(
    scan_options, load_rules, load_disabled, build_yara, run, mdc
):
    broker = {"client_config": config}
    result = malware_detection(broker)
    assert len(result) == 2
    assert isinstance(result[0], DatasourceProvider)
    assert isinstance(result[1], DatasourceProvider)
    assert result[0].content == ['{"mutation": "test"}']
    assert result[0].relative_path == "malware-detection-results.json"
    assert result[1].content == ['{"rule1": [{"match": "data"}]}']
    assert result[1].relative_path == "malware-detection-results-raw.json"
