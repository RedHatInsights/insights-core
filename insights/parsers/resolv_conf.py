from .. import Parser, parser, get_active_lines, LegacyItemAccess

KEYWORD1 = 'search'
KEYWORD2 = 'domain'


@parser('resolv.conf')
class ResolvConf(LegacyItemAccess, Parser):
    '''
    The file content looks like:
    -------------------
    ; generated by /sbin/dhclient-script
    # This file is being maintained by Puppet.
    # DO NOT EDIT
    search a.b.com b.c.com
    options timeout:2 attempts:2
    nameserver 10.160.224.51
    nameserver 10.61.193.11
    -------------------
    The parse result:
    {
        "active": "search",
        "nameserver": [
            "10.160.224.51",
            "10.61.193.11"
            ],
        "search": [
            "a.b.com",
            "b.c.com"
            ],
        "options": [
            "timeout:2",
            "attempts:2"
            ]
    }
    '''

    def parse_content(self, content):

        resolv_info = {}
        name_info = []
        key1_search = key2_domain = False

        # According to the man page, the 'domain' and 'search' keywords are
        # mutually exclusive. If more than one instance of these keywords is
        # present, the last instance wins. So, add a key "active" into
        # resolve_info pointing out which keywords is effective.
        for line in get_active_lines(content):
            # ignore the lines commented by ';'
            if line.startswith(';'):
                continue
            if line.startswith('nameserver'):
                name_info.append(line.split()[1])
            else:
                temp = line.split()
                if temp[0] in (KEYWORD1, KEYWORD2):
                    key1_search = temp[0] == KEYWORD1
                    key2_domain = temp[0] == KEYWORD2
                resolv_info[temp[0]] = temp[1:]

        resolv_info['nameserver'] = name_info
        resolv_info['active'] = ''
        if key1_search and not key2_domain:
            resolv_info['active'] = KEYWORD1
        elif key2_domain and not key1_search:
            resolv_info['active'] = KEYWORD2

        self.data = resolv_info
